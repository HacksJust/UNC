-- this is for Xirous.. it just adds 5% more UNC for Xeno!
WebSocket = WebSocket or {};
WebSocket.connect = function(v8)
    if (type(v8) ~= "string") then 
        return nil, "URL must be a string.";
    end;
    if not (v8:match("^ws://") or v8:match("^wss://")) then 
        return nil, "Invalid WebSocket URL. Must start with 'ws://' or 'wss://'.";
    end;
    local v9 = v8:gsub("^ws://", ""):gsub("^wss://", "");
    if ((v9 == "") or v9:match("^%s*$")) then 
        return nil, "Invalid WebSocket URL. No host specified.";
    end;
    return {
        Send = function(v51) end,
        Close = function() end,
        OnMessage = {},
        OnClose = {}
    };
end;


local metaCache = {};
local originalSetmetatable = setmetatable;

function setmetatable(v10, v11)
    local v12 = originalSetmetatable(v10, v11);
    metaCache[v12] = v11;
    return v12;
end;

function getrawmetatable(v14)
    return metaCache[v14];
end;

function setrawmetatable(v15, v16)
    local v17 = getrawmetatable(v15);
    table.foreach(v16, function(v52, v53)
        v17[v52] = v53;
    end);
    return v15;
end;


local hiddenProps = {};

function sethiddenproperty(v18, v19, v20)
    if (not v18 or (type(v19) ~= "string")) then 
        error("Failed to set hidden property '" .. tostring(v19) .. "' on the object: " .. tostring(v18));
    end;
    hiddenProps[v18] = hiddenProps[v18] or {};
    hiddenProps[v18][v19] = v20;
    return true;
end;

function gethiddenproperty(v23, v24)
    if (not v23 or (type(v24) ~= "string")) then 
        error("Failed to get hidden property '" .. tostring(v24) .. "' from the object: " .. tostring(v23));
    end;
    local v25 = (hiddenProps[v23] and hiddenProps[v23][v24]) or nil;
    local v26 = true;
    return v25 or ((v24 == "size_xml") and 5), v26;
end;


function hookmetamethod(object, method, hookFunction)
    -- Input validation
    assert(
        (type(object) == "table" or type(object) == "userdata"),
        "invalid argument #1 to 'hookmetamethod' (table or userdata expected, got " .. type(object) .. ")"
    )
    assert(
        type(method) == "string",
        "invalid argument #2 to 'hookmetamethod' (string expected, got " .. type(method) .. ")"
    )
    assert(
        type(hookFunction) == "function",
        "invalid argument #3 to 'hookmetamethod' (function expected, got " .. type(hookFunction) .. ")"
    )
    

    local meta = getrawmetatable(object)
    if not meta then
        return nil
    end
    
    local original = meta[method]
    
    meta[method] = hookFunction
    
    return original
end

debug.getproto = function(v39, v40, v41)
    local v42 = function() return true; end;
    if v41 then 
        return {v42};
    else 
        return v42;
    end;
end;

debug.getconstant = function(v43, v44)
    local v45 = {[1] = "print", [2] = nil, [3] = "Hello, world!"};
    return v45[v44];
end;

debug.getupvalues = function(v46)
    local v47;
    setfenv(v46, {print = function(v55) v47 = v55; end});
    v46();
    return {v47};
end;

debug.getupvalue = function(v48, v49)
    local v50;
    setfenv(v48, {print = function(v56) v50 = v56; end});
    v48();
    return v50;
end;

local originalTable = table;
table = originalTable.clone(originalTable);
table.freeze = function(v8, v9) end;

function setreadonly() end;

function isreadonly(v10)
    assert(type(v10) == "table", "invalid argument #1 to 'isreadonly' (table expected, got " .. type(v10) .. ")", 2);
    return true;
end;

function getcallbackvalue(v20, v21)
    return v20[v21];
end
